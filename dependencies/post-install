#!/usr/bin/env bash

## check binary
function check_binary() {
if [ ! -f "$(which $1 | grep -iv 'not found')" ]; then
  echo -en "\x1b[1;31;40m$1 not found\x21\x1b[0m\n" && exit 1
fi
}

check_binary wget
check_binary woff2_compress

#wget -c https://api.github.com/repos/google/material-design-icons/zipball -O material.zip
#wget -c https://codeload.github.com/google/material-design-icons/legacy.zip/refs/heads/master -O material.zip
#wget -c https://github.com/google/material-design-icons/archive/refs/heads/master.zip -O material.zip

urls=$(cat << 'EOF'
https://fonts.googleapis.com/css2?family=Material+Icons
https://fonts.googleapis.com/css2?family=Material+Icons+Outlined
https://fonts.googleapis.com/css2?family=Material+Icons+Round
https://fonts.googleapis.com/css2?family=Material+Icons+Sharp
https://fonts.googleapis.com/css2?family=Material+Icons+Two+Tone
EOF
)

material_headers=$(cat << 'EOF'

.material-icons
{

  /* Support for all WebKit browsers. */
  -webkit-font-smoothing: antialiased;
  /* Support for Safari and Chrome. */
  text-rendering: optimizeLegibility;
  /* Support for Firefox. */
  -moz-osx-font-smoothing: grayscale;
  /* Support for IE. */
  font-feature-settings: 'liga';
}

/* Rules for sizing the icon. */
.material-icons.md-18
{

  font-size: 18px;
}

.material-icons.md-24
{

  font-size: 24px;
}

.material-icons.md-36
{

  font-size: 36px;
}

.material-icons.md-48
{

  font-size: 48px;
}

/* Rules for using icons as black on a light background. */
.material-icons.md-dark
{

  color: rgba(0, 0, 0, 0.54);
}

.material-icons.md-dark.md-inactive
{

  color: rgba(0, 0, 0, 0.26);
}

/* Rules for using icons as white on a dark background. */
.material-icons.md-light
{

  color: rgba(255, 255, 255, 1);
}

.material-icons.md-light.md-inactive
{

  color: rgba(255, 255, 255, 0.3);
}
EOF
)

if [ ! -d fonts/fonts ]; then

  mkdir -p fonts/fonts

  echo '/* Auto - Generated By Post Install */' >fonts\/fonts.css

  while IFS= read -r url; do

    ## download stylesheets, silent mode
    filename=$(echo "$url" | cut -d\= -f2 | sed -e 's/\+/\_/g' | tr '[:upper:]' '[:lower:]')
    echo -en "\x1b[1;33;40m" download fonts\/$filename\.css ... "\x1b[0m\n"
    wget -c "$url" -O fonts\/$filename\.css &>/dev/null

    ## get uri font
    uri=$(cat fonts\/$filename\.css | grep -i 'src\:' | grep -Eio 'https://fonts.gstatic.com.+?\.(ttf|otf|eot)')
    format=$(echo $uri | grep -Eio '(ttf|otf|eot)')
    fontfile=fonts\/$filename\.$format

    ## download font, silent mode
    echo -en "\x1b[1;33;40m" download fonts\/$fontfile ... "\x1b[0m\n"
    wget -c "$uri" -O fonts\/$fontfile &>/dev/null

    ## compress font, silent mode
    echo -en "\x1b[1;31;40m" compress fonts\/$fontfile ... "\x1b[0m\n"
    woff2_compress fonts\/$fontfile &>/dev/null
    fontcompress=fonts\/$filename\.woff2
    rm fonts\/$fontfile

    fonttype=
    case $format in

      "ttf")

        fonttype="truetype"
        ;;

      "otf")

        fonttype="opentype"
        ;;
    esac

    ## replaces font
    echo -en "\x1b[1;33;40m" replaces fonts\/$filename\.css ... "\x1b[0m\n"
    cat<<<$(cat fonts\/$filename\.css | awk "{sub(\"$uri\",\"\\\"$fontcompress\\\"\")}1")>fonts\/$filename\.css

    if [ -n "$fonttype" ]; then

      cat<<<$(cat fonts\/$filename\.css | sed -e "s/$fonttype/woff2/g")>fonts\/$filename\.css
    fi

    ## autosave inside fonts.css
    echo -en "\x1b[1;32;40m" autosave fonts\/fonts\.css ... "\x1b[0m\n"
    echo "@import url(\"$filename.css\");" >>fonts\/fonts.css

  done <<<$urls

  ## recommended from sources
  cat<<<$material_headers >>fonts\/fonts.css

fi
